---
title: "Ökonomisches Arbeiten in R"
author: "Jonathan Wenger"
format: html
editor: visual
---

Dieses Skript soll euch dabei helfen, besser und effizienter in R zu arbeiten. Dabei geht es um:

-   short-cuts

-   passende package-Auswahl und deren Pflege

-   Schleifen

## 1. R auf dem neuesten Stand halten

Klingt trivial, kann aber große Vorteile mit sich bringen:

-   bug fixes in jeder neuen Version

-   bessere Stabilität und Performance (gerade relevant, wenn euer PC nicht der neueste ist)

-   Manche packages funktionieren nur mit den neuesten R Versionen

Um R zu updaten, empfiehlt sich das `installr` package. Mit diesem lassen sich auch packages in die neueste Version übertragen und andere Dinge (wie z.B. rtools) installieren.

```{r}
#| eval: false
library(installr)
updateR()
```

RStudio könnt ihr einfach über Help –\> Check for Updates innerhalb der IDE updaten.

### 1.2 Packages updaten

Auch hier lohnt es sich, auf dem aktuellen Stand zu bleiben. Nicht nur wird die Performance häufig verbessert, sondern es finden sich auch hier wichtige bug-fixes in den Updates.

```{r}
#| eval: false
update.packages()
```

Alternativ auch möglich über den Reiter Packages -\> Update. Hier empfiehlt es sich jedoch, vor einem größeren Projekt (z.B. der Masterarbeit) einmal alles zu updaten und dann während des Projekts keine Updates durchzuführen. So seid ihr auf der sicheren Seite, dass sich nichts wichtiges für euch ändert, während ihr dranarbeitet.

Wenn ihr dennoch automatisch alle packages updaten wollt, könnt ihr das tun, indem ihr update.packages(ask = FALSE) eurer .Rprofile file hinzufügt (wenn ihr nicht wisst, was das ist, dann lasst am besten die Finger davon).

### 1.3 Package Management

Wenn ihr an einem größeren R Projekt sitzt, werdet ihr vermutlich viele verschiedene packages benutzen. Um da nicht den Überblick zu verlieren, empfiehlt es sich, diese gesammelt am Start des Dokuments zu laden.

Bei der Auswahl der richtigen Packages, können die folgenden Seiten helfen:

-   <https://www.rdocumentation.org/>

-   <https://www.r-pkg.org/>

    ![](images/clipboard-2755351949.png)

    Gerade METACRAN kann wichtige Infos über die Güte eines packages geben. Hier kann man sich diese nach verschiedenen Kriterien (wie z.B. Häufigkeit der downloads) ausgeben lassen.

    Die Suche nach dem richtigen package kann am Anfang zwar nervig und unnötig erscheinen, aber es ist häufig sinnvoll, sich einmal am Anfang länger damit auseinanderzusetzen, damit man nicht im Laufe des Projektes auf einmal merkt, es hätte ja noch ein viel besseres package für das gegeben, was man gerne machen würde.

## 2. Effiziente Skriptbearbeitung

Das vielleicht wichtigste tool, um wirklich effizient und ökonomisch in R arbeiten zu können. Auch wenn RStudio einem mit seiner graphischen Benutzeroberfläche viel abnehmen (möchte) kann der richtige Umgang mit short-cuts einem das Leben um einiges erleichtern.

### 2.1 Auto-Vervollständigung

`Tab` und `Enter` auto-verollständigen den Code. So reicht es auch, "micr" einzugeben und `Tab` zu drücken, um `microbenchmark` entstehen zu lassen. Wenn R mehrere Möglichkeiten angibt, so kann man mit den Pfeiltasten die passende auswählen und dann ebenfalls mit `Tab` ausführen. Sollte R nicht automatisch Vorschläge geben, kann man sich diese mit `Tab` mit anzeigen lassen. Das ist besonders dann hilfreich, wenn man nur die ersten 1-2 Buchstaben angeben hat.

Diese Auswahl funktioniert auch mit Spalten in einem dataframe. In dem unteren Datensatz kann man so leicht, nachdem man das `$` eingefügt hat, eine der vier Spalten mit den Pfeiltasten auswählen und mit `Tab` ausgeben lassen. Also: `Tab` ist euer bester Freund, gerade auch beim Bearbeiten von längeren Datensätzen.

```{r}
head(iris)
#iris$ Hier wird ein drip-down-Menü auftauchen, aus welchem ihr eine Spalte auswählen könnt
iris$Petal.Length
```

### 2.2 Short-Cuts

Eine vollständige Liste lässt sich über `Alt + Shift + K` aufrufen:

![](images/clipboard-1382094675.png)

Diese short-cuts sind wirklich nicht zu unterschätzen. Ihr könnt euch einiges an Zeit und Arbeit ersparen, indem ihr die wichtigsten lernt und beherrscht:

|               Short-Cut                |                       Funktion                        |
|:-----------------------------:|:---------------------------------------:|
|               `Strg + Z`               |                   Rückgängig machen                   |
|             `Strg + Enter`             | Die Zeile ausführen / Den ausgewählten Code ausführen |
|            `Strg + Alt + R`            |             Den kompletten Code ausführen             |
|            `Strg + Alt + B`            | Führe den Code vom Anfang bis zur jetzigen Zeile aus  |
|            `Strg + Alt + E`            |       Führt den Code von jetzt bis zum Ende aus       |
| `Alt + Shift + Pfeiltaste Hoch/Runter` |        Die Zeile drüber oder drunter kopieren         |
|               `Strg + D`               |                   Die Zeile löschen                   |
|    `Strg + Pfeiltaste Links/Rechts`    |        Navigiert durch den Code Wort für Wort         |

Das ist nur eine Auswahl. Schaut in der Liste der short-cuts nach, was ihr für eure Arbeiten gebrauchen könnte und versucht euch diese short-cuts anzueignen, wenn ihr schneller arbeiten wollt.

### 2.3 Kommentare

Kommentiert am besten alles, was ihr tut. Auch wenn es nervig ist, kann es einem im späteren Verlauf helfen, was man sich bei dem Code gedacht hat. Gerade, wenn ihr den Code mit anderen Personen teilt, um euch bspw. Hilfe einzuholen, kann dies sehr hilfreich sein. Vergleicht die beiden unteren Code-Blöcke um zu sehen, wie hilfreich Kommentare für ein schnelles Verständnis des Codes sind.

```{r}
#| eval: false
load("erstis.RData")
library(lavaan)
library(semPlot)

cfa.1.txt <- 'f =~ stim1 + stim4 + stim8 + stim11'

cfa.1.fit <- cfa(cfa.1.txt, data = erstis)

summary(cfa.1.fit, fit = TRUE)

cfa.2.txt <- 'f1 =~ stim1 + stim8 
              f2 =~ stim4 + stim11'

cfa.2.fit <- cfa(cfa.2.txt, data = erstis)

summary(cfa.2.fit, fit = TRUE)

vergleich <- anova(cfa.1.fit, cfa.2.fit)
```

```{r}
#| eval: false
## Konfirmatorische Faktorenanalyse ##
# Datensatz laden
load("erstis.RData")
library(lavaan)
library(semPlot)

#Modelkonstruierung
cfa.1.txt <- 'f =~ stim1 + stim4 + stim8 + stim11'

#Modelschätzung
cfa.1.fit <- cfa(cfa.1.txt, data = erstis)
summary(cfa.1.fit, fit = TRUE)


#Alternative Modellkonstruierung
cfa.2.txt <- 'f1 =~ stim1 + stim8 
              f2 =~ stim4 + stim11'


#Modelschätzung
cfa.2.fit <- cfa(cfa.2.txt, data = erstis)
summary(cfa.2.fit, fit = TRUE)


#Modellvergleich
vergleich <- anova(cfa.1.fit, cfa.2.fit)
```

## 3. Schleifen

Schleifen können ein hilfreiches tool in R sein, wenn sie richtig eingesetzt werden. Schauen wir uns dazu mal das untere Beispiel an:

```{r}
n <- 1000000

method1 <- function(n){
  x <- NULL
  for (i in 1:n) {
    x[i] <- sqrt(i)
  }
}
```

Hier wurde eine Funktion geschrieben, die einem die Wurzel jeder Zahl aus einem Datenvektor ausgeben soll. Allerdings ist diese Funktion nicht ganz optimal, da das in der Schleife wachsende Objekt "x" zu Beginn nicht vollständig initialisiert wurde. Besser wäre es so:

```{r}
method2 <- function(n){
  x <- numeric(n)
  for (i in 1:n) {
    x[i] <- sqrt(i)
  }
}
```

Diese beiden Funktionen lassen sich nun in Bezug auf ihre Durchführungsgeschwindigkeit vergleichen:

```{r}
library(tidyverse)
library(microbenchmark)
vergleich <- microbenchmark(times = 100, unit = "s", 
               method1(n), method2(n))

autoplot(vergleich)
```

Wie man sehen kann, ist die zweite Methode durchaus um einiges schneller. Es geht aber noch einfacher; man kann sich die ganze Schleife sparen, indem man einfach vektorisiert:
```{r}
method3 <- function(n){
x <- sqrt(1:n)
}
```

Der Vergleich aller drei Methoden zeigt hier, dass das Vektorisieren die schnellste und effizienteste Methode ist:
```{r}
vergleich <- microbenchmark(times = 100, unit = "s", 
               method1(n), method2(n), method3(n))

autoplot(vergleich)
```

